{
	"settings": {
		"authentication": {
			"method": "basic",
			"certificate": "",
			"key": ""
		},
		"tls": {
			"validation": false
		},
		"verbosity": 1,
		"headers": {
			"content-type": "application/json",
			"X-Allow-Overwrite": "true"
		},
		"endpoint": "https://nsx.lab.engyak.net"
	},
	"plays": {
		"get_cluster_certificate_id": {
			"uri": "/api/v1/cluster/api-certificate",
			"description": "Read cluster certificate ID",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": false,
			"variables": {}
		},
		"get_cluster_certificate": {
			"uri": "/api/v1/trust-management/certificates/{{ id }}",
			"description": "Read Certificate (requires ID variable)",
			"method": "GET",
			"requiresvariables": false,
			"variables": { 
				"id": false
			}
		},
		"get_cluster_certificates": {
			"uri": "/api/v1/trust-management/certificates",
			"description": "List Certificates",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": false,
			"variables": {}
		},
		"get_cluster_nodes": {
			"uri": "/api/v1/cluster/nodes/",
			"description": "Get Cluster Nodes",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": "false",
			"variables": {}
		},
		"get_cluster_node": {
			"uri": "/api/v1/cluster/nodes/{{ id }}",
			"description": "Get Cluster Node",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": "true",
			"variables": {
				"id": false
			}
		},
		"get_service": {
			"uri": "/api/v1/node/services",
			"description": "Get Service",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": false,
			"variables": {}
		},
		"get_service_search_status": {
			"uri": "/api/v1/node/services/search/status",
			"description": "Get Service Search Status",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": false,
			"variables": {}
		},
		"get_cluster_node_corfusync": {
			"uri": "/api/v1/cluster/nodes/{{ id }}/repo_sync/status",
			"description": "Get Cluster Node Corfu Status",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": "true",
			"variables": {
				"id": false
			}
		},
		"post_cluster_node_corfusync": {
			"uri": "/api/v1/cluster/node?action=repo_sync",
			"description": "Force Corfu to resync",
			"method": "POST",
			"requiresbody": false,
			"requiresvariables": false,
			"variables": {}
		},
		"get_tns": {
			"uri": "/api/v1/transport-nodes",
			"description": "Get Transport Nodes",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": false,
			"variables": {}	
		},
		"get_tier0s": {
			"uri": "/policy/api/v1/infra/tier-0s",
			"description": "Get Tier-0 Logical Routers",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": false,
			"variables": {}	
		},
		"get_tier0": {
			"uri": "/policy/api/v1/infra/tier-0s/{{ id }}",
			"description": "Get Tier-0 Logical Router (requires ID variable)",
			"method": "GET",
			"requiresvariables": true,
			"variables": { 
				"id": false
			}
		},
		"get_tier0_routes": {
			"uri": "/policy/api/v1/infra/tier-0s/{{ id }}/forwarding-table",
			"description": "Get Tier-0 Logical Router Table (requires ID variable)",
			"method": "GET",
			"requiresvariables": true,
			"variables": { 
				"id": false
			}
		},
		"get_tier0_bgp_neighbors": {
			"uri": "/policy/api/v1/infra/tier-0s/{{ id }}/locale-services/default/bgp/neighbors/status",
			"description": "Get Tier-0 Logical Router BGP Neighbors (requires ID variable)",
			"method": "GET",
			"requiresvariables": true,
			"variables": {
				"id": false
			}
		},
		"get_domains": {
			"uri": "/policy/api/v1/infra/domains",
			"description": "NSX Infrastructure domains",
			"method": "GET",
			"requiresvariables": false
		},
		"get_policy_inventory_groups": {
			"uri": "/policy/api/v1/infra/domains/{{ domain }}/groups",
			"description": "Fetch NS-Groups",
			"method": "GET",
			"requiresvariables": true,
			"variables": {
				"domain": false
			}
		},
		"get_policy_inventory_group": {
			"uri": "/policy/api/v1/infra/domains/{{ domain }}/groups/{{ id }}",
			"description": "Fetch NS-Group",
			"method": "GET",
			"requiresvariables": true,
			"variables": {
				"domain": false,
				"id": false
			}
		},
		"patch_policy_inventory_group": {
			"uri": "/policy/api/v1/infra/domains/{{ domain }}/groups/{{ id }}",
			"description": "Patch NS-Group",
			"method": "PATCH",
			"requiresvariables": true,
			"requiresbody": true,
			"variables": {
				"domain": false,
				"id": false
			}
		},
		"get_event_defs": {
			"uri": "/api/v1/events",
			"description": "Fetch system alarm definitions",
			"method": "GET",
			"requiresvariables": false
		},
		"get_alarms": {
			"uri": "/api/v1/alarms",
			"description": "Fetch system alarm",
			"method": "GET",
			"requiresvariables": false
		},
		"get_realization_alarms": {
			"uri": "/policy/api/v1/infra/realized-state/alarms",
			"description": "Get System-wide Realization alarms",
			"method": "GET",
			"requiresvariables": false
		},
		"get_securityconfig": {
			"uri": "/api/v1/global-configs/SecurityGlobalConfig",
			"description": "Get System-wide security settings",
			"method": "GET",
			"requiresvariables": false
		},
		"put_certificate": {
			"uri": "/api/v1/trust-management/certificates?action=import",
			"description": "Upload Certificate. Requires Payload",
			"method": "POST",
			"requiresbody": true,
			"requiresvariables": true,
			"variables": {
				"certkeychain": false,
				"privatekey": false,
				"passphrase": false
			},
			"payload": {
				"_revision":"0",
				"pem_encoded": "{{ certkeychain }}\n",
				"private_key": "{{ privatekey }}\n",
				"passphrase": "{{ passphrase }}"
			}
		},
		"post_cluster_certificate": { 
			"uri": "/api/v1/cluster/api-certificate?action=set_cluster_certificate&certificate_id={{ id }}",
			"description": "Set Cluster Certificate",
			"method": "POST",
			"requiresbody": false,
			"requiresvariables": true,
			"variables": {
				"id": false
			}
		},
		"post_webui_certificate": { 
			"uri": "/api/v1/node/services/http?action=apply_certificate&certificate_id={{ id }}",
			"description": "Set WebUI Certificate",
			"method": "POST",
			"requiresbody": false,
			"requiresvariables": true,
			"variables": { 
				"id": false
			}
		},
		"get_globalconfig": {
			"uri": "/policy/api/v1/infra/global-config",
			"description": "Get Global Config. attribute `l3_forwarding_mode` is used to turn on IPv6",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": false
		},
		"set_globalconfig_ipv6_on": {
			"uri": "/policy/api/v1/infra/global-config",
			"description": "Set Global Config. attribute `l3_forwarding_mode` is used to turn on IPv6",
			"method": "PATCH",
			"requiresbody": true,
			"requiresvariables": false,
			"payload": {
				"display_name": "global-config",
				"path": "/infra/global-config",
				"relative_path": "global-config",
				"l3_forwarding_mode": "IPV4_AND_IPV6"
			}
		},
		"put_securityconfig": {
			"uri": "/api/v1/global-configs/SecurityGlobalConfig",
			"description": "Set Global Security Config",
			"method": "PUT",
			"requiresbody": true,
			"requiresvariables": true,
			"variables": {
				"crl_checking_enabled": false,
				"resource_type": "SecurityGlobalConfig",
				"_revision": ""
			},
			"payload": {
				"crl_checking_enabled": false,
				"resource_type": "SecurityGlobalConfig",
				"_revision": ""
			}
		},
		"get_nsxalb_controller": {
			"uri": "/policy/api/v1/alb/controller-nodes/deployments",
			"description": "Delete inaccessible/stale NSX ALB Entries",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": false,
			"variables": {
				"id": ""
			}
		},
		"delete_nsxalb_controller": {
			"uri": "/policy/api/v1/alb/controller-nodes/deployments/{{ id }}?action=delete&force_delete=true&inaccessible",
			"description": "Delete inaccessible/stale NSX ALB Entries",
			"method": "POST",
			"requiresbody": false,
			"requiresvariables": true,
			"variables": {
				"id": ""
			}
		},
		"get_nsxalb_tls_profiles": {
			"uri": "/policy/api/v1/infra/alb-ssl-profiles",
			"description": "Fetch NSX ALB Managed TLS Profiles",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": false,
			"variables": {}
		},
		"get_nsxalb_tls_profile": {
			"uri": "/policy/api/v1/infra/alb-ssl-profiles/{{ id }}",
			"description": "Fetch NSX ALB Managed TLS Profiles",
			"method": "GET",
			"requiresbody": false,
			"requiresvariables": true,
			"variables": {
				"id": false
			}
		},
		"set_nsxalb_tls_profile": {
			"uri": "/policy/api/v1/infra/alb-ssl-profiles/{{ id }}",
			"description": "Fetch NSX ALB Managed TLS Profiles",
			"method": "PUT",
			"requiresbody": true,
			"requiresvariables": true,
			"variables": {
				"id": false
			},
			"payload": {}
		}
	},
	"errors": {
		"200": [
			"OK",
			"Request fulfilled, document follows"
		],
		"201": [
			"Created",
			"Document created, URL follows"
		],
		"202": [
			"Accepted",
			"Request accepted, processing continues off-line"
		],
		"203": [
			"Non-Authoritative Information",
			"Request fulfilled from cache"
		],
		"204": [
			"No Content",
			"Request fulfilled, nothing follows"
		],
		"205": [
			"Reset Content",
			"Clear input form for further input."
		],
		"206": [
			"Partial Content",
			"Partial content follows."
		],
		"300": [
			"Multiple Choices",
			"Object has several resources -- see URI list"
		],
		"301": [
			"Moved Permanently",
			"Object moved permanently -- see URI list"
		],
		"302": [
			"Found",
			"Object moved temporarily -- see URI list"
		],
		"303": [
			"See Other",
			"Object moved -- see Method and URL list"
		],
		"304": [
			"Not Modified",
			"Document has not changed since given time"
		],
		"305": [
			"Use Proxy",
			"You must use proxy specified in Location to access this resource."
		],
		"307": [
			"Temporary Redirect",
			"Object moved temporarily -- see URI list"
		],
		"400": [
			"Bad Request",
			"Bad request syntax or unsupported method"
		],
		"401": [
			"Unauthorized",
			"No permission -- see authorization schemes"
		],
		"402": [
			"Payment Required",
			"No payment -- see charging schemes"
		],
		"403": [
			"Forbidden",
			"Request forbidden -- authorization will not help"
		],
		"404": [
			"Not Found",
			"Nothing matches the given URI"
		],
		"405": [
			"Method Not Allowed",
			"Specified method is invalid for this server."
		],
		"406": [
			"Not Acceptable",
			"URI not available in preferred format."
		],
		"407": [
			"Proxy Authentication Required",
			"You must authenticate with this proxy before proceeding."
		],
		"408": [
			"Request Timeout",
			"Request timed out; try again later."
		],
		"409": [
			"Conflict",
			"Request conflict."
		],
		"410": [
			"Gone",
			"URI no longer exists and has been permanently removed."
		],
		"411": [
			"Length Required",
			"Client must specify Content-Length."
		],
		"412": [
			"Precondition Failed",
			"Precondition in headers is false."
		],
		"413": [
			"Request Entity Too Large",
			"Entity is too large."
		],
		"414": [
			"Request-URI Too Long",
			"URI is too long."
		],
		"415": [
			"Unsupported Media Type",
			"Entity body in unsupported format."
		],
		"416": [
			"Requested Range Not Satisfiable",
			"Cannot satisfy request range."
		],
		"417": [
			"Expectation Failed",
			"Expect condition could not be satisfied."
		],
		"500": [
			"Internal Server Error",
			"Server got itself in trouble"
		],
		"501": [
			"Not Implemented",
			"Server does not support this operation"
		],
		"502": [
			"Bad Gateway",
			"Invalid responses from another server/proxy."
		],
		"503": [
			"Service Unavailable",
			"The server cannot process the request due to a high load"
		],
		"504": [
			"Gateway Timeout",
			"The gateway server did not receive a timely response"
		],
		"505": [
			"HTTP Version Not Supported",
			"Cannot fulfill request."
		]
	}
}